// <auto-generated />
using Database.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace esoftApp.Migrations
{
    [DbContext(typeof(esoftContext))]
    partial class esoftContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("esoftApp.Database.Models.Agent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Commission")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Agents", t =>
                        {
                            t.HasCheckConstraint("CK_agents_commision_allowed_value", "Commission > 0 AND Commission < 100");
                        });
                });

            modelBuilder.Entity("esoftApp.Database.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Clients", t =>
                        {
                            t.HasCheckConstraint("CK_clients_phone_or_email_not_null", "Phone IS NOT NULL OR Email IS NOT NULL");
                        });
                });

            modelBuilder.Entity("esoftApp.Database.Models.Deal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("BuyerAgentDeductions")
                        .HasColumnType("float");

                    b.Property<double>("CompanyDeductions")
                        .HasColumnType("float");

                    b.Property<int>("DemandId")
                        .HasColumnType("int");

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.Property<double>("SellerAgentDeductions")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DemandId");

                    b.HasIndex("OfferId");

                    b.ToTable("Deals", t =>
                        {
                            t.HasCheckConstraint("CK_deal_buyer_agent_deductions_allowed_value", "BuyerAgentDeductions > 0 AND BuyerAgentDeductions < 100");

                            t.HasCheckConstraint("CK_deal_company_deductions_allowed_value", "CompanyDeductions > 0 AND CompanyDeductions < 100");

                            t.HasCheckConstraint("CK_deal_deductions_lower_hundred", "CompanyDeductions + BuyerAgentDeductions + SellerAgentDeductions < 100");

                            t.HasCheckConstraint("CK_deal_seller_agent_deductions_allowed_value", "SellerAgentDeductions > 0 AND SellerAgentDeductions < 100");
                        });
                });

            modelBuilder.Entity("esoftApp.Database.Models.Demand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AgentId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("Flat")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("House")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("MaxPrice")
                        .HasColumnType("int");

                    b.Property<int?>("MinPrice")
                        .HasColumnType("int");

                    b.Property<int>("RealEstateTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("ClientId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("RealEstateTypeId");

                    b.ToTable("Demands", t =>
                        {
                            t.HasCheckConstraint("CK_demands_max_price_over_zero", "MaxPrice > 0");

                            t.HasCheckConstraint("CK_demands_min_price_over_zero", "MinPrice > 0");
                        });
                });

            modelBuilder.Entity("esoftApp.Database.Models.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("esoftApp.Database.Models.FlatDemand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DemandId")
                        .HasColumnType("int");

                    b.Property<double?>("MaxArea")
                        .HasColumnType("float");

                    b.Property<int?>("MaxFloor")
                        .HasColumnType("int");

                    b.Property<int?>("MaxRoomsCount")
                        .HasColumnType("int");

                    b.Property<double?>("MinArea")
                        .HasColumnType("float");

                    b.Property<int?>("MinFloor")
                        .HasColumnType("int");

                    b.Property<int?>("MinRoomsCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DemandId")
                        .IsUnique();

                    b.ToTable("FlatDemands", t =>
                        {
                            t.HasCheckConstraint("CK_flat_demands_max_area_over_zero", "MaxArea > 0");

                            t.HasCheckConstraint("CK_flat_demands_max_floor_over_one", "MaxFloor > 1");

                            t.HasCheckConstraint("CK_flat_demands_max_rooms_count_over_zero", "MaxRoomsCount > 0");

                            t.HasCheckConstraint("CK_flat_demands_min_area_over_zero", "MinArea > 0");

                            t.HasCheckConstraint("CK_flat_demands_min_floor_over_one", "MinFloor > 1");

                            t.HasCheckConstraint("CK_flat_demands_min_rooms_count_over_zero", "MinRoomsCount > 0");
                        });
                });

            modelBuilder.Entity("esoftApp.Database.Models.HouseDemand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DemandId")
                        .HasColumnType("int");

                    b.Property<double?>("MaxArea")
                        .HasColumnType("float");

                    b.Property<int?>("MaxFloorCount")
                        .HasColumnType("int");

                    b.Property<int?>("MaxRoomsCount")
                        .HasColumnType("int");

                    b.Property<double?>("MinArea")
                        .HasColumnType("float");

                    b.Property<int?>("MinFloorCount")
                        .HasColumnType("int");

                    b.Property<int?>("MinRoomsCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DemandId")
                        .IsUnique();

                    b.ToTable("HouseDemands", t =>
                        {
                            t.HasCheckConstraint("CK_house_demands_max_area_over_zero", "MaxArea > 0");

                            t.HasCheckConstraint("CK_house_demands_max_floor_count_over_one", "MaxFloorCount > 1");

                            t.HasCheckConstraint("CK_house_demands_max_rooms_count_over_zero", "MaxRoomsCount > 0");

                            t.HasCheckConstraint("CK_house_demands_min_area_over_zero", "MinArea > 0");

                            t.HasCheckConstraint("CK_house_demands_min_floor_count_over_one", "MinFloorCount > 1");

                            t.HasCheckConstraint("CK_house_demands_min_rooms_count_over_zero", "MinRoomsCount > 0");
                        });
                });

            modelBuilder.Entity("esoftApp.Database.Models.LandDemand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DemandId")
                        .HasColumnType("int");

                    b.Property<double?>("MaxArea")
                        .HasColumnType("float");

                    b.Property<double?>("MinArea")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DemandId")
                        .IsUnique();

                    b.ToTable("LandDemands", t =>
                        {
                            t.HasCheckConstraint("CK_land_demands_max_area_over_zero", "MaxArea > 0");

                            t.HasCheckConstraint("CK_land_demands_min_area_over_zero", "MinArea > 0");
                        });
                });

            modelBuilder.Entity("esoftApp.Database.Models.Offer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AgentId")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("RealEstateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("ClientId");

                    b.HasIndex("RealEstateId");

                    b.ToTable("Offers", t =>
                        {
                            t.HasCheckConstraint("CK_price_over_zero", "Price > 0");
                        });
                });

            modelBuilder.Entity("esoftApp.Database.Models.RealEstate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("Area")
                        .HasColumnType("float");

                    b.Property<string>("City")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<int?>("Flat")
                        .HasColumnType("int");

                    b.Property<int?>("Floor")
                        .HasColumnType("int");

                    b.Property<int?>("House")
                        .HasColumnType("int");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<int>("RealEstateTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("Rooms")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("RealEstateTypeId");

                    b.ToTable("RealEstates", t =>
                        {
                            t.HasCheckConstraint("CK_realestate_latitude_allowed_value", "Latitude >= -90 AND Latitude <= 90");

                            t.HasCheckConstraint("CK_realestate_longitude_allowed_value", "Longitude >= -180 AND Longitude <= 180");
                        });
                });

            modelBuilder.Entity("esoftApp.Database.Models.RealEstateType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("RealEstateTypes");
                });

            modelBuilder.Entity("esoftApp.Database.Models.Deal", b =>
                {
                    b.HasOne("esoftApp.Database.Models.Demand", "Demand")
                        .WithMany("Deals")
                        .HasForeignKey("DemandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("esoftApp.Database.Models.Offer", "Offer")
                        .WithMany("Deals")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Demand");

                    b.Navigation("Offer");
                });

            modelBuilder.Entity("esoftApp.Database.Models.Demand", b =>
                {
                    b.HasOne("esoftApp.Database.Models.Agent", "Agent")
                        .WithMany("Demands")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("esoftApp.Database.Models.Client", "Client")
                        .WithMany("Demands")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("esoftApp.Database.Models.District", "District")
                        .WithMany("Demands")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("esoftApp.Database.Models.RealEstateType", "RealEstateType")
                        .WithMany("Demands")
                        .HasForeignKey("RealEstateTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("Client");

                    b.Navigation("District");

                    b.Navigation("RealEstateType");
                });

            modelBuilder.Entity("esoftApp.Database.Models.FlatDemand", b =>
                {
                    b.HasOne("esoftApp.Database.Models.Demand", "Demand")
                        .WithOne("FlatDemand")
                        .HasForeignKey("esoftApp.Database.Models.FlatDemand", "DemandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Demand");
                });

            modelBuilder.Entity("esoftApp.Database.Models.HouseDemand", b =>
                {
                    b.HasOne("esoftApp.Database.Models.Demand", "Demand")
                        .WithOne("HouseDemand")
                        .HasForeignKey("esoftApp.Database.Models.HouseDemand", "DemandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Demand");
                });

            modelBuilder.Entity("esoftApp.Database.Models.LandDemand", b =>
                {
                    b.HasOne("esoftApp.Database.Models.Demand", "Demand")
                        .WithOne("LandDemand")
                        .HasForeignKey("esoftApp.Database.Models.LandDemand", "DemandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Demand");
                });

            modelBuilder.Entity("esoftApp.Database.Models.Offer", b =>
                {
                    b.HasOne("esoftApp.Database.Models.Agent", "Agent")
                        .WithMany("Offers")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("esoftApp.Database.Models.Client", "Client")
                        .WithMany("Offers")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("esoftApp.Database.Models.RealEstate", "RealEstate")
                        .WithMany("Offers")
                        .HasForeignKey("RealEstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("Client");

                    b.Navigation("RealEstate");
                });

            modelBuilder.Entity("esoftApp.Database.Models.RealEstate", b =>
                {
                    b.HasOne("esoftApp.Database.Models.District", "District")
                        .WithMany("RealEstates")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("esoftApp.Database.Models.RealEstateType", "RealEstateType")
                        .WithMany("RealEstates")
                        .HasForeignKey("RealEstateTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");

                    b.Navigation("RealEstateType");
                });

            modelBuilder.Entity("esoftApp.Database.Models.Agent", b =>
                {
                    b.Navigation("Demands");

                    b.Navigation("Offers");
                });

            modelBuilder.Entity("esoftApp.Database.Models.Client", b =>
                {
                    b.Navigation("Demands");

                    b.Navigation("Offers");
                });

            modelBuilder.Entity("esoftApp.Database.Models.Demand", b =>
                {
                    b.Navigation("Deals");

                    b.Navigation("FlatDemand");

                    b.Navigation("HouseDemand");

                    b.Navigation("LandDemand");
                });

            modelBuilder.Entity("esoftApp.Database.Models.District", b =>
                {
                    b.Navigation("Demands");

                    b.Navigation("RealEstates");
                });

            modelBuilder.Entity("esoftApp.Database.Models.Offer", b =>
                {
                    b.Navigation("Deals");
                });

            modelBuilder.Entity("esoftApp.Database.Models.RealEstate", b =>
                {
                    b.Navigation("Offers");
                });

            modelBuilder.Entity("esoftApp.Database.Models.RealEstateType", b =>
                {
                    b.Navigation("Demands");

                    b.Navigation("RealEstates");
                });
#pragma warning restore 612, 618
        }
    }
}
